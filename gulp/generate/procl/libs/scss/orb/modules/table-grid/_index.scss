@function defaultTo($mapVariable, $defaultMap){
    @if (type-of($defaultMap) == 'map' ){

        $finalParams: $mapVariable;
        @each $key, $value in $defaultMap {


						//@debug map-has-key($mapVariable, $key);

            @if (not map-has-key($mapVariable, $key)) {

            		

                $finalParams: map-merge($finalParams, ($key : $value));

            }



            
        }

        @return $finalParams;
    } @else {
        @error 'The defaultTo function only works for Sass maps';
    }
}





/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;
  
  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }
  
  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }
  
  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }
  
  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  
  // Return result
  @return $result;
}





@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}


@function list-each($list){
	@each $item in $list{
		@return $item;
	}

}





$defaultSettings: (
		gridType: fixed,
		gridWidth: 100%,
		cols: 2,
		verticle: top,
		default: true,
		reverse: false,
		grid: (
			name: "test"
		),
		nth: (
			type: of-type,
			first: false,
			last: falase,
		)
);





@mixin grid ($gridMap: () ){






	
	$settings: defaultTo($gridMap, $defaultSettings);



	$grid: map-deep-get($settings,grid,name);




	

	.grid{

			@if(map-get($settings,default) != false){
				// Стили для таблицы
				display: table;
				width: map-get($settings,gridWidth);
				table-layout: map-get($settings,gridType);
				
				@if(map-get($settings,reverse)){
					direction: rtl,
				}

				@each $key,$value in $settings {
					
					

					@if($key == 'grid'){
						@each $param,$val in $value{

							#{list-each($param)} : #{list-each($val)};
						}
					}

				}


				
				

			}
		&__part{

			// Стили для ячеек
			@if(map-get($settings,default) != false){


				display: table-cell;
				vertical-align: map-get($settings,verticle);
				@if(map-get($settings,reverse)){
					direction: ltr,
				}
			}

			
			$nth-type : map-deep-get($settings,nth,type);
			$nth-first : map-deep-get($settings,nth,first);
			$nth-last : map-deep-get($settings,nth,last);




			$num: 1;
			


			@while $num <= map-get($settings,cols) {


				$output : 'nth-#{$nth-type}(#{$num})';


				@if($nth-first and $num == 1){
					@if($nth-type == 'of-type'){
						$output: 'first-of-type'
					}
					@if($nth-type == 'child'){
						$output: 'first-child'
					}
					
				}


				@if($nth-last and $num == map-get($settings,cols)){
					@if($nth-type == 'of-type'){
						$output: 'last-of-type'
					}
					@if($nth-type == 'child'){
						$output: 'last-child'
					}
					
				}



				// Пробегаемся по колонкам 				
				&:#{$output} {									

					@each $key,$value in $settings {
        					$map: map-get($settings, $key);
									

									@if(str-index($key,'col') and not str-index($key,'cols')){




											
											@if(str-index($key, #{$num})){
												@each $param,$value in $map{

													@if($param == up){
														display: table-caption;
													}
													@else{
														#{list-each($param)} : #{list-each($value)};
													}

													
												} 
        							}
										}
    			}

				}
				$num: $num + 1;
			}


		}




	}
}
